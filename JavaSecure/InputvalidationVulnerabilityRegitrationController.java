package com.offsec.ssd.elearn.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.offsec.ssd.elearn.model.User;
import com.offsec.ssd.elearn.repository.UserRepository;
import com.offsec.ssd.elearn.service.RegistrationService;
import com.offsec.ssd.elearn.util.CryptoUtil;



@Controller
public class RegistrationController {

    private static final Logger logger = LoggerFactory.getLogger(RegistrationController.class);

    @Autowired
    RegistrationService registrationService;

    @Autowired
    UserRepository userRepo;

    @GetMapping("/registration")
    public String getRegistrationPage(HttpServletRequest req, Model model, HttpServletResponse res) {

        return "registration";
    }


    @PostMapping("/registration")
    public String postRegistrationPage(HttpServletRequest req, Model model, HttpServletResponse res, RedirectAttributes redirectAttributes) {
        
        StringBuilder sb = new StringBuilder();
        boolean invalid = false;
        if(req.getParameter("firstname") == null ) {
            invalid = true;
            sb.append("Missing first name value.\n");
        } 
        if(req.getParameter("lastname") == null) {
            invalid = true;
            sb.append("Missing last name value.\n");
        } 
        if(req.getParameter("email") == null) {
            invalid = true;
            sb.append("Missing email address.\n");
        } 
        if(req.getParameter("username") == null) {
            invalid = true;
            sb.append("Missing username value.\n");
        } 
        if(req.getParameter("password") == null) {
            invalid = true;
            sb.append("Missing password value.\n");
        } 
        if(req.getParameter("registrationtype") == null) {
            invalid = true;
            sb.append("Missing registration type.\n");
        } else {
            if(!req.getParameter("registrationtype").equals("student") && !req.getParameter("registrationtype").equals("teacher")) {
                invalid = true;
                sb.append("Invalid registration type value");
            }
        }

        if(invalid) {
            logger.info("Invalid registration request: " + sb.toString());
            model.addAttribute("message", sb.toString());
            return "registration";
        }
        String firstname = req.getParameter("firstname");
        String lastname = req.getParameter("lastname");
        String email = req.getParameter("email");
        String username = req.getParameter("username");
        String password = CryptoUtil.bcryptHashString(req.getParameter("password"));
        String registrationType = req.getParameter("registrationtype");

        if(registrationType.equalsIgnoreCase("teacher")){
            if(!registrationService.isTeacherEmail(email)){
                model.addAttribute("message", "Only users with .edu email addresses may register as teachers at this time.");
                return "registration";
            }
        }

        User u = new User();
        u.setFirstName(firstname);
        u.setLastName(lastname);
        u.setEmail(email);
        u.setUsername(username);
        u.setPassword(password);
        
        if(registrationType.equalsIgnoreCase("teacher")) {
            u.setPublic(true);
            u.setTeacher(true);
            u.setStudent(false);
        } else {
            u.setPublic(false);
            u.setTeacher(false);
            u.setStudent(true);
        }
        
        try {
            userRepo.insertNewUser(u);
        } catch(DuplicateKeyException e) {
            model.addAttribute("message", "An account already exists for that email.");
            return "registration";
        }
        
        redirectAttributes.addAttribute("message", "Registration successful. Please loging to continue.");
        return "redirect:/login";

    }
    
}
